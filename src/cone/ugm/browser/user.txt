cone.ugm.browser.user
=====================

::

    >>> from cone.app import root
    >>> from cone.tile import render_tile
    
    >>> import cone.app.browser.login
    >>> import cone.ugm.browser.columns
    >>> import cone.ugm.browser.users
    >>> users = root['users']
    >>> user = users['uid2']
    
    >>> request = layer.new_request()

Unauthenticated content tile renders login form::

    >>> expected = \
    ...     '<form action="http://example.com/users/uid2/login"'
    >>> res = render_tile(user, request, 'content')
    >>> res.find(expected) > -1
    True

Other tiles raise if unauthenticated::
    
    >>> render_tile(user, request, 'leftcolumn')
    Traceback (most recent call last):
      ...
    Forbidden: Unauthorized: 
    tile <cone.ugm.browser.user.UserLeftColumn object at ...> 
    failed permission check
    
    >>> render_tile(user, request, 'rightcolumn')
    Traceback (most recent call last):
      ...
    Forbidden: Unauthorized: 
    tile <cone.ugm.browser.user.UserRightColumn object at ...> 
    failed permission check
    
    >>> render_tile(user, request, 'columnlisting')
    Traceback (most recent call last):
      ...
    Forbidden: Unauthorized: 
    tile <cone.ugm.browser.user.GroupsOfUserColumnListing object at ...> 
    failed permission check
    
    >>> render_tile(user, request, 'allcolumnlisting')
    Traceback (most recent call last):
      ...
    Forbidden: Unauthorized: 
    tile <cone.ugm.browser.user.AllGroupsColumnListing object at ...> 
    failed permission check

Authenticate and render tiles::

    >>> layer.login('manager')
    
    >>> res = render_tile(user, request, 'leftcolumn')
    >>> res.find('<div class="column left_column box">') > -1
    True
    
    >>> res = render_tile(user, request, 'rightcolumn')
    >>> res.find('<div class="column right_column">') > -1
    True
    
    >>> res = render_tile(user, request, 'columnlisting')
    >>> expected = \
    ...     '<li ajax:target="http://example.com/ugm/groups/group2">'
    >>> res.find(expected) > -1
    True
    
    >>> res = render_tile(user, request, 'allcolumnlisting')
    >>> expected = \
    ...     '<li ajax:target="http://example.com/ugm/groups/group1">'
    >>> res.find(expected) > -1
    True
    
    >>> layer.logout()

Add::
    
    >>> layer.login('viewer')
    
    >>> request = layer.new_request()
    >>> request.params['factory'] = 'user'
    
    >>> res = render_tile(users, request, 'add')
    
    >> res
    
    Traceback (most recent call last):
      ...
    Forbidden: Unauthorized: tile 
    <cone.app.browser.authoring.AddTile object at ...> 
    failed permission check
    
    >> layer.login('manager')
    >> res = render_tile(users, request, 'add')
    >> expected = '<form action="http://example.com/users/add"'
    >> res.find(expected) > -1
    True
    
    >> request.params['userform.cn'] = 'cn99'
    >> request.params['userform.sn'] = 'sn99'
    >> request.params['userform.mail'] = 'uid99@example.com'
    >> request.params['userform.userPassword'] = 'secret99'
    
    >> res = render_tile(users, request, 'add')
    >> res
    
    >> res.find('No media title given') > -1
    True
    
    >> request.params['userform.id'] = 'uid99'
    
    >> res = render_tile(users, request, 'add')
    >> res
    u''
    
    >> request.environ['redirect']
    <HTTPFound at ... 302 Found>
    
    >> users.keys()
    []
    
    >> user = repository['uid99']
    >> user.attrs.items()


Edit::

    >> request = layer.new_request()
    >> res = render_tile(media, request, 'edit')
    >> expected = '<form action="http://example.com/repositories/repo1/d/edit"'
    >> res.find(expected) > -1
    True
    
    >> request.params['mediaform.title'] = u'Other media title'
    >> request.params['mediaform.description'] = u'Media description'
    >> request.params['action.mediaform.save'] = '1'
    >> res = render_tile(media, request, 'edit')
    >> res
    u''
    
    >> media.metadata.title
    u'Other media title'
    
    >> media.metadata.description
    u'Media description'

    >> layer.logout()

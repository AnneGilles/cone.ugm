LDAP Settings Application Node
==============================

App path for testing::

    >>> import os
    >>> import pkg_resources
    >>> path = pkg_resources.resource_filename('cone.ugm', '')
    >>> path = os.path.sep.join(path.split(os.path.sep)[:-3])
    >>> path
    '...cone.ugm'

Import and create Settings application node::
    
    >>> from cone.ugm.model.settings import UgmSettings

    >>> settings = UgmSettings(_app_path=path)
    >>> settings
    <UgmSettings object 'None' at ...>

Check default LDAP attributes::

    >>> attrs = settings.attrs
    
    >>> attrs.uri
    u'ldap://127.0.0.1:12345'
    
    >>> attrs.user
    u'cn=Manager,dc=my-domain,dc=com'
    
    >>> attrs.password
    u'secret'
    
    >>> attrs.users_dn
    u'ou=users,...
    
    >>> attrs.groups_dn
    u'ou=groups,...
    
    >>> md = settings.metadata
    >>> md.title
    'LDAP Settings'
    
    >>> md.description
    'LDAP Connection Settings'

Config objects::

    >>> settings.ldap_props
    <node.ext.ldap.properties.LDAPServerProperties object at ...>
    
    >>> settings.ldap_ucfg
    <node.ext.ldap.ugm.UsersConfig object at ...>
    
    >>> settings.ldap_gcfg
    <node.ext.ldap.ugm.GroupsConfig object at ...>

XXX later::
    >>> settings.ldap_rcfg is None
    True

LDAP connectivity tests::

    >>> from node.ext.ldap.properties import LDAPProps
    >>> props = LDAPProps(
    ...     uri='ldap://127.0.0.1:12346/',
    ...     user='',
    ...     password='',
    ...     cache=False,
    ... )
    
    >>> settings._ldap_props = props
    
    >>> settings.ldap_connectivity
    SERVER_DOWN({'desc': "Can't contact LDAP server"},)
    
    >>> settings.ldap_users_container_valid
    False
    
    >>> settings.ldap_groups_container_valid
    False
    
    >>> settings._ldap_props = layer['props']
    >>> settings._ldap_ucfg = layer['ucfg']
    >>> settings._ldap_gcfg = layer['gcfg']
    
    >>> settings.ldap_connectivity
    'success'
    
    >>> old_users_dn = settings.attrs.users_dn
    >>> settings.attrs.users_dn = \
    ...     u'ou=users,ou=groupOfNames_10_10,dc=my-domain,dc=com'
    
    >>> old_groups_dn = settings.attrs.groups_dn
    >>> settings.attrs.groups_dn = \
    ...     u'ou=groups,ou=groupOfNames_10_10,dc=my-domain,dc=com'
    
    >>> settings.ldap_users_container_valid
    True
    
    >>> settings.ldap_groups_container_valid
    True

    >>> settings.attrs.users_dn = old_users_dn
    >>> settings.attrs.groups_dn = old_groups_dn

Settings are written on ``__call__``::

    >>> settings()

Test invalidate::

    >>> import cone.app
    >>> import cone.ugm
    >>> backend = cone.ugm.backend
    >>> backend
    
    >>> root = cone.app.root
    >>> from cone.ugm.model.utils import ugm_backend
    >>> backend = ugm_backend(root)
    
    >>> backend
    <Ugm object 'ugm' at ...>
    
    >>> backend is ugm_backend(root)
    True
    
    >>> settings = root['settings']['ugm']
    >>> settings
    <UgmSettings object 'ugm' at ...>
    
    >>> props = settings.ldap_props
    >>> ucfg = settings.ldap_ucfg
    >>> gcfg = settings.ldap_gcfg
    
    >>> props is settings.ldap_props
    True
    
    >>> ucfg is settings.ldap_ucfg
    True
    
    >>> gcfg is settings.ldap_gcfg
    True
    
    >>> settings.invalidate()
    >>> backend is ugm_backend(root)
    False
    
    >>> props is settings.ldap_props
    False
    
    >>> ucfg is settings.ldap_ucfg
    False
    
    >>> gcfg is settings.ldap_gcfg
    False

Reset backend and prepare settings for following tests::

    >>> cone.ugm.backend = None
    >>> settings._ldap_props = layer['props']
    >>> settings._ldap_ucfg = layer['ucfg']
    >>> settings._ldap_gcfg = layer['gcfg']
    